# Default values for hpcc.

global:
  # Settings in the global section apply to all HPCC components in all subcharts

  image:
    ## It is recommended to name a specific version rather than latest, for any non-trivial deployment
    #version: latest
    root: "hpccsystems"    # change this if you want to pull your images from somewhere other than DockerHub hpccsystems
    pullPolicy: IfNotPresent
  
  # logging sets the default logging information for all components. Can be overridden locally
  logging:
    detail: 100

  # Specify a defaultEsp to control which EclWatch service is returned from Std.File.GetEspURL, and other uses
  # If not specified, the first esp component present is assumed.
  # Can also be overridden locally in individual components
  ## defaultEsp: myesp


## storage:
##
## If storage.[type].existingClaim is defined, a Persistent Volume Claim must
## exist with that name. If an existingClaim is specified, storageClass and
## storageSize are not used.
##
## If storage.[type].storageClass is defined, storageClassName: <storageClass>
## If set to "-", storageClassName: "", which disables dynamic provisioning
## If undefined (the default) or set to null, no storageClassName spec is
##   set, choosing the default provisioner.  (gp2 on AWS, standard on
##   GKE, AWS & OpenStack)
##
## storage.[type].forcePermissions=true is required by some types of provisioned
## storage, where the mounted filing system has insufficient permissions to be
## read by the hpcc pods. Examples include using hostpath storage (e.g. on
## minikube and docker for desktop), or using NFS mounted storage.

storage:
  dllStorage:
    storageSize: 3Gi
    storageClass: ""
    # existingClaim: ""
    # forcePermissions: false

  daliStorage:
    storageSize: 1Gi
    storageClass: ""
    # existingClaim: ""
    # forcePermissions: false

  dataStorage:
    storageSize: 100Gi
    storageClass: ""
    # existingClaim: ""
    # forcePermissions: false

dali:
- name: mydali

eclagent:
- name: hthor
  ## replicas indicates how many eclagent pods should be started
  replicas: 1
  ## maxActive controls how many workunits may be active at once (per replica)
  maxActive: 4
  ## prefix may be used to set a filename prefix applied to any relative filenames used by jobs submitted to this queue
  prefix: hthor
  ## Set to false if you want to launch each workunit in its own container, true to run as child processes in eclagent pod
  useChildProcesses: false
  ## type may be 'hthor' (the default) or 'roxie', to specify that the roxie engine rather than the hthor engine should be used for eclagent workunit processing
  type: hthor

- name: roxie
  replicas: 1
  prefix: roxie
  maxActive: 20
  useChildProcesses: true
  type: roxie
    
eclccserver:
- name: myeclccserver
  replicas: 1
  ## Set to false if you want to launch each workunit compile in its own container, true to run as child processes in eclccserver pod.
  useChildProcesses: false
  ## maxActive controls how many workunit compiles may be active at once (per replica)
  maxActive: 4
  ## Specify a list of queues to listen on if you don't want this eclccserver listening on all queues. If empty or missing, listens on all queues
  listen: []
    
esp:
- name: myesp
  replicas: 1

roxie:
- name: roxie-cluster
  disabled: false
  prefix: roxiecluster
  services:
  - name: query
    port: 9876
    listenQueue: 200
    numThreads: 0
    external: true
  - name: on-demand
    port: 0
  numChannels: 2
  ## Set serverReplicas to indicate a separate replicaSet of roxie servers, with slave nodes not acting as servers
  serverReplicas: 0
  topoReplicas: 1
  topoport: 9004
  ## Set localSlave to true for a scalable cluster of "single-node" roxie servers
  localSlave: false
  useAeron: false

thor:
- name: thor
  numSlaves: 10
  globalMemorySize: 4096
  prefix: thor
  eclagent:
    maxActive: 15
  thoragent:
    maxActive: 2
